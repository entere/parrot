// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth/auth.proto

package com_island_code_srv_auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthService interface {
	MakeAccessToken(ctx context.Context, in *MakeTokenRequest, opts ...client.CallOption) (*MakeTokenResponse, error)
	DelUserAccessToken(ctx context.Context, in *DelTokenRequest, opts ...client.CallOption) (*DelTokenResponse, error)
	GetCachedAccessToken(ctx context.Context, in *GetCachedTokenRequest, opts ...client.CallOption) (*GetCachedTokenResponse, error)
	// 使用用户名密码登录
	LoginByName(ctx context.Context, in *LoginByNameRequest, opts ...client.CallOption) (*LoginByNameResponse, error)
	// 更新密码
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...client.CallOption) (*UpdatePasswordResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.island.code.srv.auth"
	}
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) MakeAccessToken(ctx context.Context, in *MakeTokenRequest, opts ...client.CallOption) (*MakeTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.MakeAccessToken", in)
	out := new(MakeTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) DelUserAccessToken(ctx context.Context, in *DelTokenRequest, opts ...client.CallOption) (*DelTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.DelUserAccessToken", in)
	out := new(DelTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetCachedAccessToken(ctx context.Context, in *GetCachedTokenRequest, opts ...client.CallOption) (*GetCachedTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.GetCachedAccessToken", in)
	out := new(GetCachedTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) LoginByName(ctx context.Context, in *LoginByNameRequest, opts ...client.CallOption) (*LoginByNameResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.LoginByName", in)
	out := new(LoginByNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...client.CallOption) (*UpdatePasswordResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.UpdatePassword", in)
	out := new(UpdatePasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	MakeAccessToken(context.Context, *MakeTokenRequest, *MakeTokenResponse) error
	DelUserAccessToken(context.Context, *DelTokenRequest, *DelTokenResponse) error
	GetCachedAccessToken(context.Context, *GetCachedTokenRequest, *GetCachedTokenResponse) error
	// 使用用户名密码登录
	LoginByName(context.Context, *LoginByNameRequest, *LoginByNameResponse) error
	// 更新密码
	UpdatePassword(context.Context, *UpdatePasswordRequest, *UpdatePasswordResponse) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) error {
	type auth interface {
		MakeAccessToken(ctx context.Context, in *MakeTokenRequest, out *MakeTokenResponse) error
		DelUserAccessToken(ctx context.Context, in *DelTokenRequest, out *DelTokenResponse) error
		GetCachedAccessToken(ctx context.Context, in *GetCachedTokenRequest, out *GetCachedTokenResponse) error
		LoginByName(ctx context.Context, in *LoginByNameRequest, out *LoginByNameResponse) error
		UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, out *UpdatePasswordResponse) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	return s.Handle(s.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) MakeAccessToken(ctx context.Context, in *MakeTokenRequest, out *MakeTokenResponse) error {
	return h.AuthHandler.MakeAccessToken(ctx, in, out)
}

func (h *authHandler) DelUserAccessToken(ctx context.Context, in *DelTokenRequest, out *DelTokenResponse) error {
	return h.AuthHandler.DelUserAccessToken(ctx, in, out)
}

func (h *authHandler) GetCachedAccessToken(ctx context.Context, in *GetCachedTokenRequest, out *GetCachedTokenResponse) error {
	return h.AuthHandler.GetCachedAccessToken(ctx, in, out)
}

func (h *authHandler) LoginByName(ctx context.Context, in *LoginByNameRequest, out *LoginByNameResponse) error {
	return h.AuthHandler.LoginByName(ctx, in, out)
}

func (h *authHandler) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, out *UpdatePasswordResponse) error {
	return h.AuthHandler.UpdatePassword(ctx, in, out)
}
